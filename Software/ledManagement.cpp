/*
 * ledManagement.cpp
 *
 *  Created on: 30 juin 2017
 *      Author: jj
 */


#include "ledManagement.h"

static u8 led_hash[256]={0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x6, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7,
		0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x9, 0x9, 0x9, 0x9, 0x9, 0x9, 0xA, 0xA, 0xA, 0xA, 0xA, 0xB, 0xB, 0xB, 0xB, 0xC,
		0xC, 0xC, 0xD, 0xD, 0xD, 0xE, 0xE, 0xE, 0xF, 0xF, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x14, 0x14, 0x15, 0x16, 0x16,
		0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x26, 0x27, 0x29, 0x2A, 0x2B, 0x2D, 0x2F,
		0x30, 0x32, 0x34, 0x36, 0x38, 0x39, 0x3B, 0x3D, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4B, 0x4D, 0x50, 0x52, 0x55, 0x57, 0x5A, 0x5D,
		0x5F, 0x62, 0x65, 0x68, 0x6B, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C, 0x7F, 0x82, 0x85, 0x88, 0x8B, 0x8E, 0x91, 0x94, 0x97, 0x99,
		0x9C, 0x9F, 0xA2, 0xA5, 0xA7, 0xAA, 0xAD, 0xAF, 0xB2, 0xB4, 0xB7, 0xB9, 0xBC, 0xBE, 0xC0, 0xC2, 0xC4, 0xC7, 0xC9, 0xCB, 0xCC,
		0xCE, 0xD0, 0xD2, 0xD4, 0xD5, 0xD7, 0xD9, 0xDA, 0xDB, 0xDD, 0xDE, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE7, 0xE8, 0xE8, 0xE9,
		0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEE, 0xEF, 0xF0, 0xF0, 0xF1, 0xF2, 0xF2, 0xF3, 0xF3, 0xF4, 0xF4, 0xF5, 0xF5, 0xF6, 0xF6, 0xF6,
		0xF7, 0xF7, 0xF7, 0xF8, 0xF8, 0xF8, 0xF9, 0xF9, 0xF9, 0xF9, 0xFA, 0xFA, 0xFA, 0xFA, 0xFA, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB, 0xFB,
		0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD, 0xFD,
		0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE};

LEDs_management::LEDs_management() {
	static LED myAlarm = LED(PIN_ALARM_LED);
	static LED myWifi = LED(PIN_WIFI_LED);
	static LED myBattery = LED(PIN_BATTERY_LED);

	led_alarm = &myAlarm;
	led_wifi = &myWifi;
	led_battery = &myBattery;

	//this->refresh_leds(0);
}

void LEDs_management::update(int luminosity, bool battery_on, bool wifi_on, bool alarm_on) {
	led_alarm->setState(alarm_on);
	led_wifi->setState(wifi_on);
	led_battery->setState(battery_on);

	this->refresh_leds(luminosity);
}

void LEDs_management::refresh_leds(int luminosity) {
	led_alarm->refresh_led(luminosity);
	led_battery->refresh_led(luminosity);
	led_wifi->refresh_led(luminosity);
}

void LEDs_management::setModeAlarmLed(e_state_led expected_state){
	led_alarm->setMode(expected_state);
}

void LEDs_management::setModeBatteryLed(e_state_led expected_state){
	led_battery->setMode(expected_state);
}

void LEDs_management::setModeWifiLed(e_state_led expected_state){
	led_wifi->setMode(expected_state);
}



LED::LED(int pin_in){
	state = false;
	pin=pin_in;
	mode=e_state_led_fixed;
	last_state=false;
	last_pwm=-1;

	pinMode(pin, OUTPUT);
	analogWrite(pin, 0);

}
void LED::setMode(e_state_led mode_in){
	mode = mode_in;
}
void LED::setState(boolean state_in){
	state = state_in;
	if((state == false) && (mode != e_state_led_fixed)){
		mode = e_state_led_fixed;
	}
}


/* range lum : 1024 */
void LED::refresh_led(int lum){

	float modifier = 1;
	int count;

	switch (mode) {
	case e_state_led_fixed:
		// do nothing
		break;
	case e_state_led_blinking_fast:
		if ( (millis()%BLINKING_FAST_PERIOD_MS) < (BLINKING_FAST_PERIOD_MS/2) ){
			modifier = 0;
		}
		break;

	case e_state_led_blinking:
		if ( (millis()%BLINKING_PERIOD_MS) < (BLINKING_PERIOD_MS/2) ){
			modifier = 0;
		}
		break;

	case e_state_led_fading_fast:
		count = millis()%FADING_FAST_PERIOD_MS;
		if ( count < (FADING_FAST_PERIOD_MS/2) ){
			modifier = (float)count / (float)(FADING_FAST_PERIOD_MS/2.0);
		} else {
			modifier = (float)(FADING_FAST_PERIOD_MS - count) / (float)(FADING_FAST_PERIOD_MS/2.0);
		}
		break;

	case e_state_led_fading:
		count = millis()%FADING_PERIOD_MS;
		if ( count < (FADING_PERIOD_MS/2) ){
			modifier = (float)count / (float)(FADING_PERIOD_MS/2.0);
		} else {
			modifier = (float)(FADING_PERIOD_MS - count) / (float)(FADING_PERIOD_MS/2.0);
		}
		break;
	}

	int pwm = get_pwm(lum,modifier);
	if((pwm != last_pwm) || (state != last_state)){
		last_pwm = pwm;
		last_state = state;
		analogWrite(pin, pwm *(int)state);
	}
}

/* lmuminosity between 0 & 1023 , modifier between 0 & 1*/
u8 LED::get_pwm(int luminosity, float modifier) {
	// TODO return proper value correlated to the luminosity
	// between 0 & 255
	float lum=(float)luminosity;
	u8 pwm=led_hash[(int)(255.0*modifier*lum/1023.0)];

	//pwm = (255.0-MIN_PWM_VALUE)*pow(pwm/255.0,3.0)+MIN_PWM_VALUE;
	return (pwm);
}
